# 1. 责任链模式（Chain of Responsibility）
# 内容：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。
# 角色：
#
# 抽象处理者（Handler）
# 具体处理者（ConcreteHandler）
# 客户端（Client）
# 例：
#
# 请假部门批准：leader—>部门经理—>总经理
# Javascript事件浮升机制
# 适用场景：
#
# 有多个对象可以处理一个请求，哪个对象处理由运行时决定
# 在不明确接收者的情况下，向多个对象中的一个提交一个请求
# 优点：
#
# 降低耦合度：一个对象无需知道是其他哪一个对象处理其请求
# 缺点：
#
# 请求不保证被接收：链的末端没有处理或链配置错误


